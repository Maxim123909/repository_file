import telebot
from telebot import types
import sqlite3
from datetime import datetime, time
import time as t
import threading

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
token = '7930851116:AAEyrwflNIWtpE1ne7YmTzjOu3C5bfJQxz8'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
bot = telebot.TeleBot(token)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('medicine.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS medicines (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    name TEXT,
    dosage TEXT,
    time TEXT,
    taken INTEGER DEFAULT 0,
    FOREIGN KEY (user_id) REFERENCES users (user_id)
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS incompatible_meds (
    med1 TEXT,
    med2 TEXT,
    warning TEXT
)
''')

# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã —Å –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞–º–∏ (–ø—Ä–∏–º–µ—Ä)
try:
    cursor.executemany('''
    INSERT OR IGNORE INTO incompatible_meds (med1, med2, warning) VALUES (?, ?, ?)
    ''', [
        ('–ò–±—É–ø—Ä–æ—Ñ–µ–Ω', '–ê—Å–ø–∏—Ä–∏–Ω', '–ú–æ–∂–µ—Ç —É—Å–∏–ª–∏–≤–∞—Ç—å —Ä–∏—Å–∫ –∫—Ä–æ–≤–æ—Ç–µ—á–µ–Ω–∏–π'),
        ('–ü–∞—Ä–∞—Ü–µ—Ç–∞–º–æ–ª', '–ê–ª–∫–æ–≥–æ–ª—å', '–¢–æ–∫—Å–∏—á–Ω–æ –¥–ª—è –ø–µ—á–µ–Ω–∏'),
        ('–ê–º–æ–∫—Å–∏—Ü–∏–ª–ª–∏–Ω', '–ú–µ—Ç—Ä–æ–Ω–∏–¥–∞–∑–æ–ª', '–£—Å–∏–ª–∏–≤–∞–µ—Ç –ø–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã')
    ])
    conn.commit()
except sqlite3.IntegrityError:
    pass

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üíä –î–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ')
    btn2 = types.KeyboardButton('üìú –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—ë–º–∞')
    btn3 = types.KeyboardButton('‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å')
    btn4 = types.KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ')
    markup.add(btn1, btn2, btn3, btn4)  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏

    bot.send_message(
        message.chat.id,
        f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞—Ç–µ–ª—å –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö.\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=markup  # –ù–µ –∑–∞–±—ã–≤–∞–µ–º –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É!
    )
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ (–æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@bot.message_handler(func=lambda message: message.text == 'üíä –î–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ')
def add_medicine(message):
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:')
    bot.register_next_step_handler(msg, process_name_step)

def process_name_step(message):
    name = message.text
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –¥–æ–∑–∏—Ä–æ–≤–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 —Ç–∞–±–ª–µ—Ç–∫–∞ –∏–ª–∏ 50 –º–≥):')
    bot.register_next_step_handler(msg, process_dosage_step, name)

def process_dosage_step(message, name):
    dosage = message.text
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –ø—Ä–∏—ë–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00 –∏–ª–∏ 14:30):')
    bot.register_next_step_handler(msg, process_time_step, name, dosage)

def process_time_step(message, name, dosage):
    try:
        time_str = message.text
        datetime.strptime(time_str, '%H:%M')

        user_id = message.from_user.id
        cursor.execute(
            'INSERT INTO medicines (user_id, name, dosage, time) VALUES (?, ?, ?, ?)',
            (user_id, name, dosage, time_str)
        )
        conn.commit()

        threading.Thread(target=schedule_reminder, args=(user_id, name, dosage, time_str)).start()
        bot.send_message(message.chat.id, f'‚úÖ –õ–µ–∫–∞—Ä—Å—Ç–≤–æ "{name}" –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ {time_str}!')
    except ValueError:
        bot.send_message(message.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.')

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ (–æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@bot.message_handler(func=lambda message: message.text == 'üìú –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—ë–º–∞')
def show_history(message):
    user_id = message.from_user.id
    cursor.execute(
        'SELECT name, dosage, time, taken FROM medicines WHERE user_id = ? ORDER BY time',
        (user_id,)
    )
    medicines = cursor.fetchall()

    if not medicines:
        bot.send_message(message.chat.id, '–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—ë–º–∞ –ø—É—Å—Ç–∞.')
        return

    history_text = 'üíä –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—ë–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤:\n\n'
    for med in medicines:
        status = '‚úÖ –ü—Ä–∏–Ω—è—Ç–æ' if med[3] else '‚ùå –ù–µ –ø—Ä–∏–Ω—è—Ç–æ'
        history_text += f'{med[0]} ({med[1]}) –≤ {med[2]} - {status}\n'

    bot.send_message(message.chat.id, history_text)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@bot.message_handler(func=lambda message: message.text == '‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å')
def check_compatibility(message):
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –¥–≤–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ò–±—É–ø—Ä–æ—Ñ–µ–Ω, –ê—Å–ø–∏—Ä–∏–Ω"):')
    bot.register_next_step_handler(msg, process_compatibility_check)

def process_compatibility_check(message):
    meds = [m.strip() for m in message.text.split(',')]
    if len(meds) != 2:
        bot.send_message(message.chat.id, '‚ùå –í–≤–µ–¥–∏ —Ä–æ–≤–Ω–æ –¥–≤–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞!')
        return

    cursor.execute(
        'SELECT warning FROM incompatible_meds WHERE (med1 = ? AND med2 = ?) OR (med1 = ? AND med2 = ?)',
        (meds[0], meds[1], meds[1], meds[0])
    )
    warning = cursor.fetchone()

    if warning:
        bot.send_message(message.chat.id, f'‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: {warning[0]}')
    else:
        bot.send_message(message.chat.id, '‚úÖ –≠—Ç–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –º–æ–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–º–µ—Å—Ç–µ (–Ω–æ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Å—è —Å –≤—Ä–∞—á–æ–º).')


@bot.message_handler(func=lambda message: message.text == '‚ùå –£–¥–∞–ª–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ')
def delete_medicine_menu(message):
    user_id = message.from_user.id
    cursor.execute(
        'SELECT id, name, dosage, time FROM medicines WHERE user_id = ? AND taken = 0',
        (user_id,)
    )
    medicines = cursor.fetchall()

    if not medicines:
        bot.send_message(message.chat.id, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.')
        return

    markup = types.InlineKeyboardMarkup()
    for med in medicines:
        btn_text = f"{med[1]} ({med[2]}) –≤ {med[3]}"
        markup.add(types.InlineKeyboardButton(
            text=btn_text,
            callback_data=f"delete_{med[0]}"
        ))

    bot.send_message(
        message.chat.id,
        '–í—ã–±–µ—Ä–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å"
@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def delete_medicine(call):
    medicine_id = call.data.split('_')[1]
    cursor.execute('DELETE FROM medicines WHERE id = ?', (medicine_id,))
    conn.commit()
    bot.answer_callback_query(call.id, '–õ–µ–∫–∞—Ä—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ!')
    bot.delete_message(call.message.chat.id, call.message.message_id)
@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def delete_medicine(call):
    try:
        medicine_id = call.data.split('_')[1]
        with db_lock:
            cursor.execute('DELETE FROM medicines WHERE id = ?', (medicine_id,))
            conn.commit()

        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.answer_callback_query(call.id, "‚úÖ –£–¥–∞–ª–µ–Ω–æ!")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:", e)
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å"
@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def delete_medicine(call):
    medicine_id = call.data.split('_')[1]
    cursor.execute('DELETE FROM medicines WHERE id = ?', (medicine_id,))
    conn.commit()
    bot.answer_callback_query(call.id, '–õ–µ–∫–∞—Ä—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ!')
    bot.delete_message(call.message.chat.id, call.message.message_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def schedule_reminder(user_id, name, dosage, time_str):
    try:
        while True:
            now = datetime.now().strftime('%H:%M')
            if now == time_str:
                bot.send_message(user_id, f'‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ø—Ä–∏–º–∏ {name} ({dosage})!')
                t.sleep(60)
            t.sleep(30)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏:", e)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è–ª" (–æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@bot.callback_query_handler(func=lambda call: call.data.startswith('taken_'))
def mark_as_taken(call):
    name = call.data.split('_')[1]
    user_id = call.from_user.id

    cursor.execute(
        'UPDATE medicines SET taken = 1 WHERE user_id = ? AND name = ?',
        (user_id, name)
    )
    conn.commit()

    bot.answer_callback_query(call.id, f'–õ–µ–∫–∞—Ä—Å—Ç–≤–æ "{name}" –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç–æ–µ!')

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')
    bot.infinity_polling()
